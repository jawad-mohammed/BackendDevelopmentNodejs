                 Nodejs tutorial
Basic syntax 
Nodejs is a Javascript Runtime(Not a language or a framework)
Nodejs built on v8 JavaScript engine as browsers
However its  developed in c++
Its top choice for developers beacuse it allows to run javascript code on the server.
Its fast,efficient and highly scalable.
Event driven,non blocking I/O model.
Its non-blocking and asynchronous I/O calls
It supports tens of thousands concurrent connections
It optimizes throughput and scalability in apps with many I/O operations
All of this makes Node.js apps very fast and efficient

Nodejs is useful in Anything that is not CPU intensive

Projects could be done with node
CRUD apps,
Real time services Chat,Live updates etch
CRUD apps, shopping carts, social media apps
 Tools and utilities
Install 3rd party packages (frameworks,libraries,tools)
Packages get stored in the "node_module" folder
All dependencies are listed in a "package.json" file
NPM scripts can be created to run certain taskes u
such as run a server
npm init   //generates a package.json file
npm install express  //install package locally
npm install -g nodemon //install a package globally
/////////////////////////////////////////////////////////
npm.js //repository
Package.json file
..Manifest file with app info
..Lists dependencies name and version
Specify if versions should be updated
create Npm scripts 
Easily create with "npminit"
         Lodash tutorial
Lodash is javascript library which provides utility functions for common programming taskes.It uses functional programming paradigm
Lodash was inspired by underscore.js
Lodash is helpful programmes write more concise and easier to maintain javascript code
Lodash contains tools to simplify programming with strings, numbers, arrays,functions and objects
By convention,Lodash module is mapped to the underscore character
      npm tutorial
Node package manager
//it is similar to pips in python 
..preinstalled with Nodejs
..Easily install module/packages on your system
..Modules are basically javascript libraries
..Makes it easy for developers to share and reuse code
//its javascript package manager
This basic tutorial gives you insights on 
Install,remove,update and list packages
All about package.json
Local and global packages
Dependencies / dev-dependencies
Commands and shortcuts
versioning 
NPM scripts
--------------------------------------------------------------------------------------
//path module/////
const path = require('path')
//base file name
console.log(path.basename(__filename))

//directory name
console.log(path.dirname(__filename))

//file extension
console.log(path.extname(__filename))

//create path object
console.log(path.parse(__filename).base)

//concatenate paths 
console.log(path.join(__dirname,'foldername','filename'))

////creating folder 
fs.mkdir(path.join(__dirname,'/foldername'),{}, err=>{
if(err) throw err
console.log('folder created')
})

////creating and writing to file
fs.writeFile(path.join(__dirname,'/foldername','/file.js'),'pass a text to write', err=>{
if(err) throw err
console.log('file written created!!')
})

/////// reading file ----------utf is encoding
fs.readFile(path.join(__dirname,'/folder','file.js'),'utf8',(err,data)=>{
if(err) throw err
console.log(data)
})

//similarly fs.rename etc
<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//creating server 
const http = require('http')
//create server object
http.createServer((req,res)=>{
res.write('hello im server')
res.end()
}).listen(8000,()=>console.log(`server is running))
